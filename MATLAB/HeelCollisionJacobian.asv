function [Xnew,steplength] = HeelCollisionJacobian(X,Mf,Jf,Xf,numlinks,R)%,Hfpre,Hfpost)
JointAngleCellPre = num2cell(X(1:numlinks));

jointPositions = Xf(JointAngleCellPre{:});
X(2) = wrapToPi(X(2));
steplength = jointPositions(2,end) + (X(1))*R -(X(2) - pi)*R; %don't need to account for R as only y matters here

%new angles are old angles in new coordinates
theta1new = wrapToPi(X(3) - pi);
theta2new = wrapToPi(X(2) - pi);
theta3new = wrapToPi(X(1) - pi);
JointAngleCellPost = num2cell([theta1new,theta2new,theta3new]); %equivalent angles after collision (switch stance/swing)

M = Mf(JointAngleCellPre{:}); %Inertia about old stance foot, in old coordinates

J = Jf(JointAngleCellPre{:}); %Jacobian of old stance foot, in old coordinates
J = J(1:2,:); %only consider translation in x and y for 2 dimensional system

Omegapre = X(numlinks+1:end)';

lhs = [M, -J';J, zeros(size(J,1))];
rhs = [M*Omegapre;zeros(size(J,1),1)];

%infinite solutions exist to the above
%find least norm solution (system seeks to minimize energy)

Omegapost = lhs'*(lhs*lhs')

Xnew = [theta1new,theta2new,theta3new,Omegapost'];

end

